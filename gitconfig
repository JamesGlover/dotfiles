[alias]
  ci = commit
  cim = commit -m
  ciam = commit -am
  ciaam = "!git add -A && git ciam"
  co = checkout
  cod = checkout -
  st = status -sb
  br = branch
  diffc = diff --cached
  pl = pull
  ps = push
  pls = "!git pull && git push"
  pick = cherry-pick
  pick-all = !sh -c '(git show $1 2>&1 > /dev/null || (git fetch origin && git show $1 2>&1 > /dev/null)) && git co staging && git pull && git pick $1 $2 && git pls && git co production && git pull && git pick $1 $2 && git pls && git co master && git pull' -
  uncommit = reset --soft HEAD^
  amend = commit -a --amend -C HEAD
  amendm = commit -a --amend # amend with message
  rmuntracked = clean -df
  l = log --pretty=format:'%h %an %Cred%ar %d %Cgreen%s'
  rmb = !sh -c '(git branch -D $1 >/dev/null 2>&1 || true) && (git push origin :$1 >/dev/null 2>&1 || true) && rm .git/refs/remotes/origin/$1 >/dev/null 2>&1' - # using semiconol -> syntax error :/
  adrc = "!git add . && git rebase --continue"
  adpc = "!git add . && git pick --continue"
  rbm = "!git checkout master && git pull && git co - && git rebase master"
  unpushed = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git log origin/$PROJ_BRANCH..HEAD"
  unpulled = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git fetch && git log HEAD..origin/$PROJ_BRANCH"
  clear = "!git reset .; git co .; git clean -f"
  parent-update = "!git fetch parent && git rebase parent/master"
  consume = !sh -c 'git cherry-pick $1 && git rmb $1' -
  count = shortlog -sn
  amend-to = !sh -c 'git stash && git edit $1 && git stash pop && git edit --amend' -
  rprune = !git remote prune origin > /dev/null
  reduce-to-subfolder = !sh -c 'git filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter $1 HEAD && git reset --hard && git for-each-ref refs/original/ | cut -f 2 | xargs -n 1 git update-ref -d && git reflog expire --expire=now --all && git gc --aggressive --prune=now && git remote rm origin' -

  # shortcuts so I get autocomlete
  stached-switch = "!~/dotfiles/bin/git-stached-switch"
  edit = "!~/dotfiles/bin/git-edit"
  request = "!~/dotfiles/bin/git-pull-request"
  whence = "!git-whence"

[apply]
  whitespace = nowarn

[diff]
  rename = copy

[color]
  branch = auto
  diff = auto
  status = auto

[color "branch"]
  current = green
  local = blue
  remote = yellow

#normal status has added/changed = green untracked/deleted/conflic = red -> more colors
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[pager]
  color = true

[core]
  excludesfile = ~/.gitignore
  pager = less -S

[push]
  default = current

[branch]
  autosetuprebase = always # rebase when pulling

[rerere]
  enabled = true # store resolved rebase steps even when aborted

[hub]
  protocol = https
